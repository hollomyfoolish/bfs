buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

repositories {
	mavenCentral()
	jcenter()
}

apply plugin: 'eclipse-wtp'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.moowork.node'

ext{
  downloadSource = true
}

node {
  // Set the work directory for unpacking node
  workDir = file("../front-end")
  // Set the work directory where node_modules should be located
  nodeModulesDir = file("../front-end/node_modules")
}

eclipse{
	wtp {
	 	facet {
        facet name:'jst.web', version:'3.0'
        facet name:'java', version:'1.8'
		}
	}
  classpath{
    file{
      whenMerged { classpath ->
          classpath.entries.removeAll { entry -> entry.kind == 'con' && entry.path == 'org.eclipse.jst.j2ee.internal.web.container' }
      }
    }
  }
}

dependencies {
	providedCompile "javax.servlet:javax.servlet-api:3.1.0"
    providedCompile "javax.websocket:javax.websocket-api:1.0"

    // compile "org.slf4j:jcl-over-slf4j:1.6.1"
    compile 'org.slf4j:slf4j-api:' + project.slf4jVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
	compile 'ch.qos.logback:logback-classic:' + project.logbackVersion
	compile "org.springframework:spring-core:" + project.springVersion
    compile "org.springframework:spring-beans:" + project.springVersion
    compile "org.springframework:spring-context:" + project.springVersion
    compile "org.springframework:spring-tx:" + project.springVersion
    compile "org.springframework:spring-web:" + project.springVersion
    compile "org.springframework:spring-webmvc:" + project.springVersion
    
    compile "org.eclipse.persistence:javax.persistence:" + project.springJpaVersion
    compile "org.springframework.data:spring-data-jpa:" + project.springDataJpaVersion
    
    compile "org.springframework.security:spring-security-core:" + project.springSecurityVersion
    compile "org.springframework.security:spring-security-web:" + project.springSecurityVersion
    compile "org.springframework.security:spring-security-config:" + project.springSecurityVersion
    
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

war {
    def webFolder = '../front-end/dist'
	archiveName = project.name + ".war"
    webAppDirName = webFolder
    webInf { 
        from './src/main/webapp/WEB-INF'
    }
    // exclude folder /data/**/* /sql/**/*
    // rootSpec.exclude('data/**/*', 'sql/**/*')
}

task webBuild(type: NpmTask) {
    println 'start to execute web build'  
    // npm run build
    args = ['run', 'build']
    doLast {
        println 'finish to execute corpus-manager web build'
    }
}

clean{
  // delete './db/build/corpusmgt-db-init'
}

// war.dependsOn webBuild
// webBuild.dependsOn npm_install